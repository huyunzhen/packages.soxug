#!/bin/sh
RPM_INSTALL_PREFIX=
export RPM_INSTALL_PREFIX
# summary of how this script can be called:
#        * <prerm> `remove'
#        * <old-prerm> `upgrade' <new-version>
#        * <new-prerm> `failed-upgrade' <old-version>
#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>
#        * <deconfigured's-prerm> `deconfigure' `in-favour'
#          <package-being-installed> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# action plan:
#        * <prerm> `remove'
#          - deconfigure
#        * <old-prerm> `upgrade' <new-version>
#          - skip
#        * <new-prerm> `failed-upgrade' <old-version>
#          - (not involved) do nothing
#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>
#          - deconfigure
#        * <deconfigured's-prerm> `deconfigure' `in-favour'
#          <package-being-installed> <version> `removing'
#          <conflicting-package> <version>
#          - deconfigure

LOG_FILE=/var/log/centrifydc-install.log
echo pre-uninstall: 5.1.3-482: `date` >> ${LOG_FILE}
echo "arguments:" "$@" >> ${LOG_FILE}

TRUE=0
FALSE=1

if [ "$1" = "upgrade" ]; then
    # Skip

    echo skipping on upgrade ... >> ${LOG_FILE}
fi

if [ "$1" = "remove" ] || \
    [ "$1" = "deconfigure" ]; then
    # Deconfigure (before we can safely remove our bits)

    # Check if the machine is joined
    if [ -s /var/centrifydc/kset.domain ]; then
        echo Could not uninstall Centrify DirectControl. Please run 'adleave' first.
        exit 1
    fi

    # Stop Centrify-KCM if it's running
    for tries in 1 2 3; do
        kcmPid=`/usr/share/centrifydc/bin/centrify-kcm status | sed -e 's/^.*(pid //' -e 's/).*$//'` || true
        if [ ! -z "$kcmPid" ]; then
            case "$tries" in 
                1) 
                    echo stop Centrify-KCM by centrify-kcm stop ... >> ${LOG_FILE}
                    /usr/share/centrifydc/bin/centrify-kcm stop >> ${LOG_FILE} 2>> ${LOG_FILE} || true
                    ;;
                2)
                    echo stop Centrify-KCM by init.d stop ... >> ${LOG_FILE}
                    invoke-rc.d centrify-kcm stop >> ${LOG_FILE} 2>> ${LOG_FILE} || true
                    ;;
                3) echo stop Centrify-KCM by kill ... >> ${LOG_FILE}
                    kill -9 $kcmPid >> ${LOG_FILE} 2>> ${LOG_FILE} || true
                    ;;
            esac
            sleep 2
        else 
            echo Centrify-KCM is not running. >> ${LOG_FILE}
            break
        fi
    done

    ### Remove system configurations
    
    # Remove dzsh
    if [ -f /etc/shells ]; then
        echo removing /usr/bin/dzsh from /etc/shells ... >> ${LOG_FILE}
        cat /etc/shells | sed '/\/usr\/bin\/dzsh/d' > /etc/shells.tmp
        mv -f /etc/shells.tmp /etc/shells
        awk '/^\//{ exit 1 }' /etc/shells
        if [ $? -eq 0 ]; then
            echo "WARNING: /etc/shells is empty, all ftp access will be disabled" >> ${LOG_FILE}
        fi
    fi

    # Rename upstart service file
    if [ -f "/etc/init/centrifydc.conf" ]; then
        mv -f /etc/init/centrifydc.conf /etc/init/centrifydc.conf.disable >> ${LOG_FILE} 2>> ${LOG_FILE}
    fi

    if [ -f "/etc/init/centrify-kcm.conf" ]; then
        mv -f /etc/init/centrify-kcm.conf /etc/init/centrify-kcm.conf.disable >> ${LOG_FILE} 2>> ${LOG_FILE}
    fi

    ### Remove unmanaged files

    # Remove locks
    rm -f /usr/share/centrifydc/mappers/machine/.lock
    rm -f /usr/share/centrifydc/mappers/user/.lock
    rm -f /tmp/addns.lock

    # Remove files that are not part of the package
    rm -f /usr/share/centrifydc/bin/centrifydc-*.deb
    rm -f /usr/share/centrifydc/bin/*install.sh
    if [ -h /usr/share/centrifydc/etc/openldap ]; then
        rm -f /usr/share/centrifydc/etc/openldap
    fi
    rm -f /etc/centrifydc/openldap/slapd.conf.prev

    # Remove configuration files that generated by us
    rm -f /etc/centrifydc/prev_log_setting_off
    rm -f /etc/centrifydc/apu.lst

    # Remove dz symlinks
    for DZ_CMD in dzdo dzedit ; do
        if [ -h "/usr/bin/$DZ_CMD" ] && \
            ls -l "/usr/bin/$DZ_CMD" | grep "/usr/share/centrifydc/bin/$DZ_CMD" > /dev/null ; then
            # Our symlink
            rm -f "/usr/bin/$DZ_CMD"
        fi
    done
fi

exit 0